{"title":"Software","markdown":{"yaml":{"toc":true,"numbered":false,"title":"Software"},"headingText":"Anaconda Python","containsRefs":false,"markdown":"\n\nThere are several software tools that we will use throughout this course. \n\n\nAn important part of PIC16B is navigating the Python package ecosystem. We will do so using the Anaconda distribution of Python. Getting set up with Anaconda is a somewhat detailed process, outlined below.\n\n**You should follow these instructions even if you already have Anaconda installed.** Uninstalling and reinstalling is recommended.\n\n## 1. Install Anaconda\n\nInstall and configure Anaconda Python by following [these instructions](https://docs.anaconda.com/anaconda/install/). Choose the installer appropriate for your operating system. \n\n## 2. Create the `ml-0451` Environment\n\n::: {.column-margin}\n\n![](assets/img/screencaps/create-environment.png)\n\nThe Environments tab, with the Create button on the bottom. \n\n:::\n\nAn *environment* is a separate installation of Python that exists independently of any other versions of Python on your computer. Using environments allows us to have fine-grained control over which version of Python we use, which additional packages are installed, etc. \n\nTo create an environment in Anaconda, first open the Anaconda Navigator program. Then, navigate to the Environments tab. There, you'll find the current existing environments, including the default `base(root)` environment. Click the Create button to create a new environment. \n\nIn the resulting dialog box: \n\n- Name your environmnent `ml-0451`. \n- Ensure that the installed Python is some version of Python 3.9 (it's ok if your version number differs in the last two digits from the one shown in the example). \n\n\n::: {.column-margin}\n\n![](assets/img/screencaps/environment-configure.png)\nConfiguring the `ml-0451` environment. \n\n:::\n\n## Install Packages\n\nYou will need to install several packages to the `ml-0451` environment. Note that you need to do this **even if** you previously installed these packages to another version of Python on your laptop. \n\nTo add packages to the environment, first ensure that the environment is selected (it will be highlighted in green). Then, on the righthand menu, search for the package you want to install. You may need to change the box on the top left from \"Installed\" to \"Not Installed\" in order to view packages that you have not installed yet. \n\n![](assets/img/screencaps/nb_conda.png)\n\nInstall the following packages: \n\n- `nb_conda`\n- `numpy`\n- `matplotlib`\n- `pandas`\n- `scikit-learn`\n\nI may ask you to install additional packages later on, or you may find it useful to install packages yourself in order to deal with problems or projects. You'll follow this same process to install them to the `ml-0451` environment. \n\n## Launch JupyterLab\n\nNow back on the Home tab, launch the JupyterLab app. You may need to install it first. Create a notebook using the `ml-0451` environment as a kernel. \n\n::: {.column-margin}\n\n![](assets/img/screencaps/jupyter-lab.png)\nCreating a notebook using the `ml-0451` environment as the kernel. \n\n:::\n\nNext, type the following code into the grey code cell that appears in the notebook:\n\n```python\nimport sklearn as sk\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport pandas as pd\nprint(\"I did it!\")\n```\n\nFinally, run the cell (`cmd + enter` on Mac or `ctrl + enter` on Windows). If you get no errors, only the output of the `print` statement, then you did it! \n\n::: {.column-margin}\n\n![](assets/img/screencaps/did-it.png)\nIf you see this then you did it! \n\n:::\n\n## Alternative: VSCode and Others\n\nJupyterLab is probably the easiest way for you to get up and coding. The reason is that it supports two ways of working with Python: \n\n- *Notebooks*, which allow us to combine code, text, and outputs, including data visualizations. \n- *Text files*, like `.py` files, which are best for holding complex, reusable source code. \n\nThere are other editors that support these as well. My personal favorite is [Visual Studio Code](https://code.visualstudio.com/) (often called VSCode), and you're likely to see me using it in class. It's fine for you to use VSCode or any other editor, but please note that I'll only troubleshoot Anaconda + JupyterLab. That is, you can use VSCode, but you'll be \"on your own\" in terms of getting up and running. That said, the [documentation](https://code.visualstudio.com/docs/datascience/jupyter-notebooks) on working with notebooks in VSCode is pretty good. \n\n# GitHub and GitHub Pages\n\nCreate an account on [GitHub](https://github.com/) if you do not have one already. \n\n## Optional: GitHub Desktop\n\nIf you are comfortable working with git from the command line, you can continue to do this! If you are unfamiliar with git, I recommend that you download and install the [GitHub Desktop](https://desktop.github.com/) graphical client. You will need to connect it to your GitHub account. \n\n# Your Blog via GitHub Pages\n\nNow let's set up your *blog*. Your blog is the primary way in which you will demonstrate your learning in CSCI 0451. \n\nOn GitHub, navigate to the [blog template repository](https://github.com/middlebury-csci-0451/middlebury-csci-0451.github.io). *Fork* the repository--this creates a copy of the repository under your own personal GitHub account. Then: \n\n1. Go to Settings and rename the blog `github_username.github.io`, replacing `github_username` with your GitHub username. \n2. Configure GitHub pages to deploy from the `main` branch and the `/docs` subdirectory, as pictured below. \n\n![](assets/img/screencaps/gh-pages.png)\n\nAfter a few minutes, try navigating to `https://github_username.github.io`. You should find an exact copy of the [template website](https://middlebury-csci-0451.github.io/). We haven't modified it yet, but we will soon! \n\n### What if I already have a GitHub Pages site?\n\nGreat! You can publish your blog as a project website rather than as a user site. Find out [more on the difference](https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages) and how to publish a project website. \n\n# Install Quarto\n\nHere's how the blog works: \n\n1. You modify special markdown files with extension `.qmd` and Jupyter notebooks with extension `.ipynb`. \n2. You use [Quarto](https://quarto.org/) to transform these files into the HTML files that form your blog. \n\nSo, first, [install Quarto](https://quarto.org/docs/get-started/). \n\n## Test Drive Quarto\n\nChange modify the About page of your blog by modifying the file `about.qmd`. You can do things like change text or change the profile picture (it doesn't have to be of yourself). Once you've made these changes, open a terminal in the location of your blog and type the command \n\n```bash\nquarto preview\n```\n\nAfter a few moments, a web browser window should pop up with a preview of your blog. If you navigate over to the About tab, you should see your changes. \n\n## Finalize and Publish\n\nIn the terminal, use `ctrl + c` to stop the preview process. Then type the command \n\n```bash\nquarto render\n```\n\nThis time you won't see a preview, but that's ok! Over in git or GitHub Desktop, check all the new and modified files that have been generated, add a short message, and commit them to the main branch. Then, *push* your commit. This sends your files back to GitHub.com, where it will be published. After a minute or two, navigate back over to the URL housing your website and check that your changes have been made. \n\n# Nice Job!\n\nI know it might have been a long journey, but you now have all the software you need to thrive in CSCI 0451. There's also a lot of stuff here (Jupyter/VSCode, git+GitHub) that will help you in lots of other classes and projects. \n\n# References\n\n- Quarto basics with [JupyterLab](https://quarto.org/docs/get-started/hello/jupyter.html), with [VSCode](https://quarto.org/docs/get-started/hello/vscode.html). \n- The [Quarto docs](https://quarto.org/docs/reference/) are searchable!\n- Tutorials for [JupyterLab](https://www.tutorialspoint.com/jupyter/jupyterlab_interface.htm). \n- [Getting started with GitHub Desktop](https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/overview/getting-started-with-github-desktop)\n\n\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"reference-location":"margin","output-file":"software.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.38","theme":["cosmo","custom.scss"],"number-depth":0,"callout-icon":"false;","numbered":false,"title":"Software"},"extensions":{"book":{"multiFile":true}}}}}