[
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Index of Assignments",
    "section": "",
    "text": "© Phil Chodrow, 2023"
  },
  {
    "objectID": "philosophy.html",
    "href": "philosophy.html",
    "title": "",
    "section": "",
    "text": "Calligraphy by Thich Nhat Hanh.\nLearning computing for the first time can be a challenging experience. In a nutshell, my teaching philosophy is:\n\nYour flourishing as an entire human person is more important than any grades.\nIt is my job to help you learn and grow, as a scientist, scholar, and public citizen.\nYou can count on me to interact with you in a way that furthers your learning and growth.\nIn particular, you can count on me to care about you as a person and ensure that you can get help when you need it.\n\n\n\n\nMany of my courses involve three different kinds of graded components:\n\nLearning behavior incentives include things like participation and the reading quizzes. Their purpose is to promote behavior that supports the learning of you and your peers.\nFormative assessments include things like labs and homework. Their primary purpose is to give you regular practice that will help you meet the course learning objectives. They also give you an opportunity to get feedback on your strengths and opportunities for improvement\nSummative assessments include things like a midterm and final exam. Their primary purpose is to give an overall measurement of your cumulative learning throughout the course.\n\nYou might look at these three different purposes and say:\n\n“Hey Phil, isn’t it weird to combine points from three totally different purposes into a single grade?”\n\nIf you did, I would say: yes, it is! More generally, grading is broken. This is especially true of summative assessments. Instructors struggle to design assessments that equitably measure meaningful competency, and the results are rarely predictive of future success. Professor Amy J. Ko at the University of Washington has a reflection on the deep flaws of grading, which you might wish to read.\nI don’t think that the grading systems for any of my courses are totally perfect. My promise to you is that I will be as transparent as I can about how I assess you, where you can improve, and how you can achieve your goals in the course.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/blog-post-data-science.html",
    "href": "assignments/blog-post-data-science.html",
    "title": "Elementary Data Science in Python",
    "section": "",
    "text": "© Phil Chodrow, 2023"
  },
  {
    "objectID": "posts/2023-01-01-test.html",
    "href": "posts/2023-01-01-test.html",
    "title": "My First Blog Post",
    "section": "",
    "text": "2+2\n\n4\n\n\nThis is some code that I’m writing, but also some math that I’m doing.\n\\[x = - y\\]\n\nfrom matplotlib import pyplot as plt\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "CSCI 0451, “Machine Learning,” is an introductory course in computer science at Middlebury College. It is one of several ways in which you might begin a computer science major at Midd. It’s also a great way for you to develop your computational skills to support other majors.\nThe primary aim of CSCI 0145 is to help you build strong foundations in computational thinking and programming skills. We will cover a fair amount of the Python programming language. That said, our primary focus will be on reasoning, program design, and implementation principles rather than the details of Python programming.\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "collaboration.html",
    "href": "collaboration.html",
    "title": "Collaboration And Academic Honesty",
    "section": "",
    "text": "This is a page of general principles and guidelines that apply in courses I (Phil Chodrow) teach at Middlebury College. It is lightly adapted from the handout “Collaborating on Mathematics” by the Harvey Mudd Department of Mathematics, which I discovered in a Tweet by Francis Su.\nIn any case in which the guidelines and principles on this page conflict with the policies of a specific course, the policies of the specific course should be followed. For example, if the course syllabus says that collaboration is not permitted on homeworks, then collaboration is not permitted on homeworks, regardless of anything written here.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "collaboration.html#why-collaborate",
    "href": "collaboration.html#why-collaborate",
    "title": "Collaboration And Academic Honesty",
    "section": "Why Collaborate?",
    "text": "Why Collaborate?\nMost scientists and engineers don’t work on their own; they work with colleagues and students while doing and publishing research. Increasingly, open problems in science and engineering require multiple skill sets and areas of expertise. Because of this, the need to collaborate will only increase in the future. This is why several of CS@Midd’s learning goals are explicitly focused on communication and collaboration. We want our students to have strong professional and communication skills, to be able to function well as part of a team, and to be able to work and communicate with diverse groups of people."
  },
  {
    "objectID": "collaboration.html#collaborating-on-homework-and-other-individually-assessed-assignments",
    "href": "collaboration.html#collaborating-on-homework-and-other-individually-assessed-assignments",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaborating on Homework and Other Individually-Assessed Assignments",
    "text": "Collaborating on Homework and Other Individually-Assessed Assignments\n\n(COLLABORATION IS A LIFE SKILL) Understand that working with others and asking for assistance are not signs of weakness or deficiency; rather, they are essential life skills important for making progress in any discipline, including computer science. Our department wants you to develop these skills. If you’re too shy to come to my office hours or to join a group of people working on their homework, ask a friend to come with you.\n(COLLABORATIONS BENEFIT FROM DIVERSITY) Open yourself up to working with people whom you don’t know (yet). You might find someone you work really well with and who doesn’t think exactly like you do. A wide range of experiecnes and backgrounds is beneficial in problem solving, although it may be helpful to find folks who can work on assignments during the same time of day and at roughly the same pace. If you’re having trouble finding people to work with, I can help!\n(COLLABORATIONS ARE INCLUSIVE) Believe that everyone has something meaningful to contribute (you included), and that you have something to learn from each person. This can be a difficult state of mind to achieve, but critical for healthy, effective collaboration. Here are some practical consequences:\n\nIn any group setting, listen carefully for everyone’s contributions. Don’t dismiss or ignore what someone says, and don’t move on until you’ve considered it carefully. If what is said doesn’t make sense to you, that doesn’t necessarily mean it’s incorrect–the person might just have a way of approaching the problem that is different and not yet clear to you. Furthermore, even ideas that ultimately turn out to be incomplete or incorrect are often still useful building blocks towards a successful approach.\nFind ways to verbally validate the ideas of others. For example: “One really neat feature of Zenith’s approach to part (b) is that it also works with a small modification for part (c).”\nIf someone in the group hasn’t spoken for a while, ask for their ideas or opinions. Conversely, if you find yourself talking a lot, take a step back and allow someone else to contribute to the discussion.\n\n(COLLABORATIONS REQUIRE PREPARATION) Don’t seek help from others on a probem before you’ve had time to think about it yourself, try at least one approach, and formulate the obstacle as clearly as you can. But at the same time, if you find yourself frustrated with a problem and you’re not making progress, don’t wait too long before you look for help from your classmates, your tutors, or me.\n(COLLABORATIONS GENERATE DEEPER UNDERSTANDING) Don’t be satisfied with only producing the correct final result; use your collaboration to push each other to understand:\n\nWhy does this approach work?\nWhat alternative approaches would also have worked?\nWhat are some of the merits and drawbacks of these different approaches?\n\n(COLLABORATIONS ARE EMPOWERING) Good collaborations empower people towards further growth.\n\nWhen you’re working on a problem with others and you find a path before everyone else, avoid ruining the experience of discovery for others. Conversely, if you haven’t figured out something yet and want to enjoy the discovery for yourself, don’t let someone else ruin your joy.\nIf someone asks you for help, don’t just tell them the answer or start showing them a solution method. Listen carefully to their question. Ask for more information if they aren’t being specific enough. If they say “I don’t know where to start,” ask them to tell you about their understanding of what the question is asking and which parts of it seem most puzzling. Ask guiding questions to help them discover ideas for themselves. In these situations, you have the opportunity to learn how to help others learn – this is an invaluable life skill.\n\n(COLLABORATIONS ACKNOWLEDGE CONTRIBUTORS) Whenever you’ve received help on a homework assignment from a classmate, a friend, a tutor, or me, acknowledge the support and briefly describe how it helped you in your assignment.\n\nThe reason I ask you to acknowledge tutors and myself is actually different from the reason I ask you to acknowledge classmates and friends. For classmates and friends, it’s about cultivating transparency and integrity. The primary reason I want you to acknowledge tutors and myself is that the exercise of explicitly remembering and reflecting on your learning journey is part of metacognition, a valuable set of practices that will help you succeed in this class, in college, and in your long-term career."
  },
  {
    "objectID": "collaboration.html#collaborating-on-group-projects",
    "href": "collaboration.html#collaborating-on-group-projects",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaborating on Group Projects",
    "text": "Collaborating on Group Projects\n\n(COLLABORATIONS SET GOOD EXPECTATIONS) Establish clear expectations and ways of communicating with each other to avoid misunderstandings. When, where, and how often will you meet? How can you reach each other in case of an emergency?\n(COLLABORATION IS NOT DIVISION OF LABOR) Collaboration is not the same as splitting up a problem into pieces and then slapping the completed pieces together.\n\nIdentify the parts of the problem that need to be completed together and the parts that can be completed individually.\nWork toward a final product that everyone is happy with and that represents the contributions of everyone on the group.\nDon’t just divide up the work based on who might have the most experience or skill with each part of the problem. Let those who want to develop their skills also have a chance to work on pieces that are unfamiliar to them\n\n(COLLABORATIONS ARE EQUITABLE) Aim for each person to contribute a fair and equitable amount of effort and/or time to the group’s deliverables.\n(COLLABORATIONS RESOLVE CONFLICT QUICKLY) Resolve any misunderstands between the team members quickly. Don’t let those misunderstandings fester into distrust, resentment, or anger. Don’t be afraid to ask your professor for help in resolving interpersonal conflict in your team. While this can feel uncomfortable, often these kinds of situations are important opportunities for everyone to learn more about how to coexist as collaborative, whole humans."
  },
  {
    "objectID": "collaboration.html#collaboration-is-a-skill",
    "href": "collaboration.html#collaboration-is-a-skill",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaboration is a Skill",
    "text": "Collaboration is a Skill\nYou might imagine that you already know whether you need to collaborate and how to do it. And indeed, there’s a lot you know already! But collaboration is a skill, and like other skills it rewards practice and growth. Effective collaboration involves perspective-taking, empathy, respect, and clear communication. We hope that you will find that the benefits of collaboration far outweigh its challenges."
  },
  {
    "objectID": "collaboration.html#collaboration-and-the-middlebury-honor-code",
    "href": "collaboration.html#collaboration-and-the-middlebury-honor-code",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaboration and the Middlebury Honor Code",
    "text": "Collaboration and the Middlebury Honor Code\nThe Middlebury Honor Code’s preamble states that:\n\nThe students of Middlebury College believe that individual undergraduates must assume responsibility for their own integrity on all assigned academic work…The Middlebury student body, then, declares its commitment to an honor system that fosters moral growth and to a code that will not tolerate academic dishonesty in the College community.\n\nIn any assignment in which you receive a grade individually (homeworks, exams), the purpose of the grade is to measure your learning and achievement. When you turn in such an assignment, you implicitly represent that work as work that you are able to complete yourself under the stated conditions (which may include getting help or working with others). If you cannot complete some work under the stated collaboration conditions, it is dishonest to turn in that work.\nWhen working individually, it is your responsibility to uphold the Code’s standards of integrity and academic honesty. When working in a group, it is additionally your responsibility to ensure that your group as a whole upholds these standards.\nIf you have a question about whether some form of collaboration is permitted, just ask!\n\nWhat Happens if I Observe an Honor Violation?\n\nWe all fail to uphold our highest moral aspirations at times. If you show lack of integrity or academic honesty, that doesn’t mean you’re a bad person. It means that you’re under pressure and chose the course of action that looked like the most workable one to you at the time.\nThat said, if you show lack of integrity or academic honesty, that’s an indicator that you have an opportunity for some very important growth.\nIt is part of my job to help you achieve that growth. I take this part of my job very seriously. In order to help you on your journey, I will connect both of us with the Middlebury Community Standards Office. Office leadership will help us all find a path that helps you grow toward integrity and honesty.\nThis is an awkward and uncomfortable process for everyone involved. You don’t want this."
  },
  {
    "objectID": "software.html",
    "href": "software.html",
    "title": "Software",
    "section": "",
    "text": "There are several software tools that we will use throughout this course.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "software.html#install-anaconda",
    "href": "software.html#install-anaconda",
    "title": "Software",
    "section": "1. Install Anaconda",
    "text": "1. Install Anaconda\nInstall and configure Anaconda Python by following these instructions. Choose the installer appropriate for your operating system."
  },
  {
    "objectID": "software.html#create-the-ml-0451-environment",
    "href": "software.html#create-the-ml-0451-environment",
    "title": "Software",
    "section": "2. Create the ml-0451 Environment",
    "text": "2. Create the ml-0451 Environment\n\n\n\nThe Environments tab, with the Create button on the bottom.\nAn environment is a separate installation of Python that exists independently of any other versions of Python on your computer. Using environments allows us to have fine-grained control over which version of Python we use, which additional packages are installed, etc.\nTo create an environment in Anaconda, first open the Anaconda Navigator program. Then, navigate to the Environments tab. There, you’ll find the current existing environments, including the default base(root) environment. Click the Create button to create a new environment.\nIn the resulting dialog box:\n\nName your environmnent ml-0451.\nEnsure that the installed Python is some version of Python 3.9 (it’s ok if your version number differs in the last two digits from the one shown in the example).\n\n\n\n Configuring the ml-0451 environment."
  },
  {
    "objectID": "software.html#install-packages",
    "href": "software.html#install-packages",
    "title": "Software",
    "section": "Install Packages",
    "text": "Install Packages\nYou will need to install several packages to the ml-0451 environment. Note that you need to do this even if you previously installed these packages to another version of Python on your laptop.\nTo add packages to the environment, first ensure that the environment is selected (it will be highlighted in green). Then, on the righthand menu, search for the package you want to install. You may need to change the box on the top left from “Installed” to “Not Installed” in order to view packages that you have not installed yet.\n\nInstall the following packages:\n\nnb_conda\nnumpy\nmatplotlib\npandas\nscikit-learn\n\nI may ask you to install additional packages later on, or you may find it useful to install packages yourself in order to deal with problems or projects. You’ll follow this same process to install them to the ml-0451 environment."
  },
  {
    "objectID": "software.html#launch-jupyterlab",
    "href": "software.html#launch-jupyterlab",
    "title": "Software",
    "section": "Launch JupyterLab",
    "text": "Launch JupyterLab\nNow back on the Home tab, launch the JupyterLab app. You may need to install it first. Create a notebook using the ml-0451 environment as a kernel.\n\n\n Creating a notebook using the ml-0451 environment as the kernel.\nNext, type the following code into the grey code cell that appears in the notebook:\nimport sklearn as sk\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport pandas as pd\nprint(\"I did it!\")\nFinally, run the cell (cmd + enter on Mac or ctrl + enter on Windows). If you get no errors, only the output of the print statement, then you did it!\n\n\n If you see this then you did it!"
  },
  {
    "objectID": "software.html#alternative-vscode-and-others",
    "href": "software.html#alternative-vscode-and-others",
    "title": "Software",
    "section": "Alternative: VSCode and Others",
    "text": "Alternative: VSCode and Others\nJupyterLab is probably the easiest way for you to get up and coding. The reason is that it supports two ways of working with Python:\n\nNotebooks, which allow us to combine code, text, and outputs, including data visualizations.\nText files, like .py files, which are best for holding complex, reusable source code.\n\nThere are other editors that support these as well. My personal favorite is Visual Studio Code (often called VSCode), and you’re likely to see me using it in class. It’s fine for you to use VSCode or any other editor, but please note that I’ll only troubleshoot Anaconda + JupyterLab. That is, you can use VSCode, but you’ll be “on your own” in terms of getting up and running. That said, the documentation on working with notebooks in VSCode is pretty good."
  },
  {
    "objectID": "software.html#optional-github-desktop",
    "href": "software.html#optional-github-desktop",
    "title": "Software",
    "section": "Optional: GitHub Desktop",
    "text": "Optional: GitHub Desktop\nIf you are comfortable working with git from the command line, you can continue to do this! If you are unfamiliar with git, I recommend that you download and install the GitHub Desktop graphical client. You will need to connect it to your GitHub account."
  },
  {
    "objectID": "software.html#test-drive-quarto",
    "href": "software.html#test-drive-quarto",
    "title": "Software",
    "section": "Test Drive Quarto",
    "text": "Test Drive Quarto\nChange modify the About page of your blog by modifying the file about.qmd. You can do things like change text or change the profile picture (it doesn’t have to be of yourself). Once you’ve made these changes, open a terminal in the location of your blog and type the command\nquarto preview\nAfter a few moments, a web browser window should pop up with a preview of your blog. If you navigate over to the About tab, you should see your changes."
  },
  {
    "objectID": "software.html#finalize-and-publish",
    "href": "software.html#finalize-and-publish",
    "title": "Software",
    "section": "Finalize and Publish",
    "text": "Finalize and Publish\nIn the terminal, use ctrl + c to stop the preview process. Then type the command\nquarto render\nThis time you won’t see a preview, but that’s ok! Over in git or GitHub Desktop, check all the new and modified files that have been generated, add a short message, and commit them to the main branch. Then, push your commit. This sends your files back to GitHub.com, where it will be published. After a minute or two, navigate back over to the URL housing your website and check that your changes have been made."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "CSCI 0451, Machine Learning, is an advanced elective on the topic of algorithms that learn patterns from data. Artificial intelligence, predictive analytics, pattern recognition, signal processing, and data science are all disciplines that draw heavily on techniques from machine learning.\n© Phil Chodrow, 2023"
  },
  {
    "objectID": "syllabus.html#what-will-class-time-look-like",
    "href": "syllabus.html#what-will-class-time-look-like",
    "title": "Syllabus",
    "section": "What Will Class Time Look Like?",
    "text": "What Will Class Time Look Like?\nUsually a combination of lecture, group activities, and time to work on assignments. I’ll expect you to complete required reading and pre-work ahead of class. There will often be optional readings and preparatory exercises which are indeed optional."
  },
  {
    "objectID": "syllabus.html#collaborative-grading",
    "href": "syllabus.html#collaborative-grading",
    "title": "Syllabus",
    "section": "Collaborative Grading",
    "text": "Collaborative Grading\nThis course is collaboratively graded.  In a nutshell, this means:You may have also heard the term ungrading to refer to a similar approach.\n\nThere are no points or scores attached to any assignment. When you turn in assignments, you’ll get feedback on how to revise/resubmit, improve or otherwise proceed in the course, but you won’t get “graded.”\nThere also aren’t any firm due dates, although I will give you suggestions on how to maintain a good pace. \nPeriodically throughout the semester, you will complete reflection activities to help you take stock of your learning and achievement in the course. In your final activity at the end of the semester, you’ll make a proposal for your letter grade in the course, and support it with evidence of your learning. You and I will then meet to discuss how the course went for you, using your reflection activity and proposal as a starting point. In this conversation, you and I will agree on your final letter grade for the course, which I will then submit to the registrar.\n\nAll work you wish to be considered toward your achievement in the course needs to be submitted by the end of Finals Week."
  },
  {
    "objectID": "syllabus.html#why-collaborative-grading",
    "href": "syllabus.html#why-collaborative-grading",
    "title": "Syllabus",
    "section": "Why Collaborative Grading?",
    "text": "Why Collaborative Grading?\nBecause grading is broken! Traditional points-based grading is ineffective at both (a) accurately measuring student learning and (b) motivating students to learn. I broadly agree with Jesse Stommel when he writes:\n\nAgency, dialogue, self-actualization, and social justice are not possible in a hierarchical system that pits teachers against students and encourages competition by ranking students against one another. Grades (and institutional rankings) are currency for a capitalist system that reduces teaching and learning to a mere transaction. Grading is a massive co-ordinated effort to take humans out of the educational process.\n\nI’d prefer to just not give you grades at all. But, Middlebury says I have to, and so my aim is to instead put the process of grading under your control to the greatest extent that I reasonably can."
  },
  {
    "objectID": "syllabus.html#assignments",
    "href": "syllabus.html#assignments",
    "title": "Syllabus",
    "section": "Assignments",
    "text": "Assignments\nThere are four kinds of assignments in this course, plus a mysterious “Other” category.\n\n\n\n\n\nBlog Posts\n\n\n\nBlog posts are the primary way in which you will demonstrate your understanding of course content. Blog posts usually involve: written explanation of some relevant theory; implementation one or more algorithms according to written specifications; performing experiments to test the performance of the implementations; and communicating findings in a professional way. Some blog posts will be more like short essays than problem sets or programming assignments. Your blog posts will be hosted on your own public website (which you will create). This website will serve as your portfolio for the course.\n\n\n\n\n\n\nTheory Exercises\n\n\n\nThese are mathematical exercises that build your understanding of how and why our algorithms work. We won’t do too many theory problems, although most blog posts will require you to do a bit of theoretical writing.\n\n\n\n\n\nProject\n\n\n\nYour project is a large-scale undertaking that you will design and complete, usually in a group of 2 or 3, over the course of the semester. Your project should usually involve some combination of data collection, implementation, research of related work, experimentation, deployment, or theory work (but not necessarily all components). Projects are expected to demonstrate deep engagement with both the course content and the problem selected.\n\n\n\n\n\nProcess Reflections\n\n\n\nAt the beginning of the course, you’ll write a process reflection describing your aspirations for the course—what you want to learn and achieve, and how you’d like to be assessed against your goals. We’ll have a second process reflection mid-way through the course that will allow you to reflect on your progress toward your objectives and consider changing direction if needed. At the end of the course, you’ll write a summary reflection on your learning, accomplishment, and engagement with the class. This is also the place where you’ll propose your final letter grade.   I’ll usually give you written feedback on your process reflections. We’ll also meet at the end of the course to discuss your final reflection and agree on your letter grade for the course.\n\n\n\n\n\nOther…?\n\n\n\nYou may have some topic or idea that especially interests you and which you want to explore. If you’d like to work on this topic and use it to demonstrate your learning in the course, you can propose it to me. I may have suggestsions or requested modifications before I agree to count the work in your course portfolio."
  },
  {
    "objectID": "syllabus.html#best-by-dates",
    "href": "syllabus.html#best-by-dates",
    "title": "Syllabus",
    "section": "Best-By Dates",
    "text": "Best-By Dates\nWhile we don’t have formal due dates, there is a benefit to keeping yourself on a schedule. It’s best to complete assignments close to the time when we covered the corresponding content in class, and it’s important for your wellbeing not to let work pile up. I’ll provide “best-by” dates for all assignments. These are my recommendations for when you should submit the first versions of these assignments to me for feedback."
  },
  {
    "objectID": "syllabus.html#feedback",
    "href": "syllabus.html#feedback",
    "title": "Syllabus",
    "section": "Feedback",
    "text": "Feedback\nI won’t “grade” your individual assignments, but I will offer you feedback about what I thought was successful and where you can improve. My general expectation is that you will often (though not always) revise your work in response to my feedback and resubmit it to me. Revising in response to feedback is one of the single most effective ways for you to deepen your learning.\nI’ll usually describe the importance of revisions on your assignment using one of the following categories:\n\nNo revisions suggested: you’ve done great work and should focus on the next thing.\nRevisions useful: you have opportunities for improvement on this assignment, but focusing on the next topic or assignment may be a better use of your time—use your judgment.\n\nRevisions encouraged: the best use of your time is to respond to feedback and resubmit, rather than moving on to the next assignment.\nIncomplete: the assignment isn’t sufficiently complete for it to be used as evidence of your learning."
  },
  {
    "objectID": "syllabus.html#what-work-do-you-need-to-do",
    "href": "syllabus.html#what-work-do-you-need-to-do",
    "title": "Syllabus",
    "section": "What Work Do You Need To Do?",
    "text": "What Work Do You Need To Do?\nAt the beginning of the semester, you’ll write a process letter that will outline what you’d like to learn and achieve in the course. It’s ok if you don’t meet all your aspirations by the end of the course. To help guide you in your goal-setting and work-planning, I do have some general expectations.\nI am likely to consider your time in my course to be highly successful if you do at least one of the following things:\n\nYou complete almost all assignments with a high degree of quality, including revising in response to my feedback.\nYou spend on average 10 productive hours of work time on this course outside of class.\nYou complete many assignments that I give you, and also propose and complete alternative work that demonstrates your learning and achievement."
  },
  {
    "objectID": "syllabus.html#covid-19-considerations",
    "href": "syllabus.html#covid-19-considerations",
    "title": "Syllabus",
    "section": "COVID-19 Considerations",
    "text": "COVID-19 Considerations\n\nMasks Are Expected in CSCI 0451\nThe Computer Science Department policy states that:\n\nWe in the Computer Science department value a safe learning and working environment for all. While we can’t eliminate the risks associated with COVID-19, evidence suggests that widespread masking can significantly reduce the transmission and severity of disease. In order to protect the health of our community, the CS department recommends that students and faculty wear masks in CS learning spaces, including classrooms, office hours, and public areas. We acknowledge the College policy gives instructors the final say over classroom masking requirements, and expect all students to respect instructors’ stated policies in each course.\n\nIn alignment with this policy, I require you to wear masks in class and office hours. I encourage you to wear masks during help sessions and at all other times when you are inside 75 Shannon Street.\nIf you arrive in class without a mask, I will offer you one. I will expect you to either wear it or excuse yourself from class that day."
  },
  {
    "objectID": "syllabus.html#academic-integrity-and-collaboration",
    "href": "syllabus.html#academic-integrity-and-collaboration",
    "title": "Syllabus",
    "section": "Academic Integrity and Collaboration",
    "text": "Academic Integrity and Collaboration\n\nAcademic Integrity\nBriefly, academic integrity means that you assume responsibility for ensuring that the work you submit demonstrates your learning and understanding.\nTo be frank, it’s pretty easy to act without integrity (i.e. cheat) in this course. First, there’s a lot of solution code for machine learning tasks in Python online. Second, I’m literally asking you all to post your assignments publicly online. So, there are lots of opportunities to turn in assignments without actually doing the learning that those assignments are designed to offer you.\nI assume that both of us want you to learn some cool stuff. Cheating stops you from doing that, and ultimately wastes both your time and mine. I won’t be vigorously hunting for academic integrity violations, but I may ask you to discuss code or theory with me in class or in our meetings. If I notice you struggling to explain code that you submitted for feedback, I may have questions."
  },
  {
    "objectID": "syllabus.html#collaboration",
    "href": "syllabus.html#collaboration",
    "title": "Syllabus",
    "section": "Collaboration",
    "text": "Collaboration\nI love it! Please collaborate in ways that allow you and your collaboration partners to fully learn from and engage with the content. Sharing small snippets of code or math is often helpful to get someone unstuck, but sharing complete function implementations or mathematical arguments is usually counterproductive.\nHere are some general guidelines for how I think about collaboration."
  },
  {
    "objectID": "syllabus.html#general-advice",
    "href": "syllabus.html#general-advice",
    "title": "Syllabus",
    "section": "General Advice",
    "text": "General Advice\nI am always happy to talk with you about your future plans, including internships, research opportunities, and graduate school applications. Because I am a creature of the academy, I am less knowledgeable about industry jobs, although you are welcome to ask about those too. You can drop in during Student Hours or email me to make an appointment."
  },
  {
    "objectID": "syllabus.html#letters-of-recommendation",
    "href": "syllabus.html#letters-of-recommendation",
    "title": "Syllabus",
    "section": "Letters of Recommendation",
    "text": "Letters of Recommendation\nWriting letters of recommendation for students is a fundamental part of my job and something that I am usually very happy to do. Here’s how to ask me for a letter."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Course Schedule",
    "section": "",
    "text": "Week 1 \n            \n        \n            \n                    M\n                    \n                    Sep. 12 \n             Welcome to CSCI 0145!\n   \n        \n        \n             \n                We discuss the structure of the class and briefly introduce computational thinking. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n            \n            \n                    Reading\n                            Course syllabus  \n                            Collaboration and academic honesty  \n                            Course resources  \n                            Asking for help  \n                            Algorithms and bugs  \n            \n            \n            \n            \n            \n        \n        \n            \n                    W\n                    \n                    Sep. 14 \n             Expressions and Variables\n   \n        \n        \n             \n                We discuss expressions -- the simplest recipes for computations -- and variables, which allow us to store the results of computations for later use. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Expressions  \n                            Variables  \n            \n            \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Sep. 15 \n             Guided Discovery: Introduction to Strings\n   \n        \n        \n             \n                We learn some ways to manipulate text, save the results, and show them to the user. We'll come back to advanced text manipulation much later in the course. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Applications  \n            \n            \n                    Activity\n                            GD1  \n            \n            \n            \n            \n            \n        \n        \n            \n                    F\n                    \n                    Sep. 16 \n             Functions\n   \n        \n        \n             \n                Functions are reusable computational recipes. We discuss the basic ingredients of a function and work through some simple examples. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                             Functions (1-3)  \n                             ThinkPython 3.1-3.7  \n            \n            \n            \n            \n            \n        \n            \n             Week 2 \n            \n        \n            \n                    M\n                    \n                    Sep. 19 \n             More on Functions\n   \n        \n        \n             \n                We discuss some important considerations for writing functions and using functions that other people have written. Our main topics are variable scope, documentation, and modules. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                             Functions (4-5)  \n                             ThinkPython 3.8-3.14  \n            \n            \n                    Assigned\n                        HW1 \n            \n            \n            \n        \n        \n            \n                    W\n                    \n                    Sep. 21 \n             Control Flow\n   \n        \n        \n             \n                We discuss how to make decisions when executing a program. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Conditionals  \n                            How Pair Programming Really Works by Stuart Wray  \n                             Think Like a Computer Scientist, Chapter 7   \n            \n            \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Sep. 22 \n             Guided Discovery: Practice With Functions and Control Flow\n   \n        \n        \n             \n                We practice writing functions that make simple decisions in response to user input. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n                            Social Responsibility  \n            \n            \n                    Activity\n                            GD2  \n            \n            \n            \n            \n            \n        \n        \n            \n                    F\n                    \n                    Sep. 23 \n             Lab: Developers as Decision-Makers\n   \n        \n        \n             \n                We use our skills with gathering user input, writing functions, and making simple decisions that prioritize some users over others. We also practice the human-centered design process. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Design and Collaboration  \n                            Social Responsibility  \n            \n            \n                    Activity\n                            Lab 1  \n            \n            \n                    Assigned\n                        Lab 1 \n            \n            \n            \n        \n            \n             Week 3 \n            \n        \n            \n                    M\n                    \n                    Sep. 26 \n             Recursion\n   \n        \n        \n             \n                We study recursion, a powerful tool for writing simple solutions to complex problems by breaking them down into smaller problems. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n            \n            \n                    Reading\n                            Recursion  \n                             ThinkPython 5.8-5.14  \n            \n            \n                    Assigned\n                        HW2 \n            \n            \n                    Due\n                            HW1 \n            \n        \n        \n            \n                    W\n                    \n                    Sep. 28 \n             Recursion and Recursive Graphics\n   \n        \n        \n             \n                We continue our study of recursion while creating simple recursive graphics. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n            \n            \n                    Reading\n                            Turtle Graphics  \n            \n            \n            \n            \n                    Due\n                            Lab 1 \n            \n        \n        \n            \n                    T\n                    \n                    Sep. 29 \n             Guided Discovery: Recursion and Performance\n   \n        \n        \n             \n                We learn some ways to measure and analyze the performance of functions, and use these techniques to study the performance implications of recursive techniques. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Activity\n                            GD3  \n            \n            \n            \n            \n            \n        \n        \n            \n                    F\n                    \n                    Sep. 30 \n             Lab: Fractal Graphics with Recursion\n   \n        \n        \n             \n                We practice writing functions to produce recursive graphics with the turtle module. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Activity\n                            Lab 2  \n            \n            \n                    Assigned\n                        Lab 2 \n            \n            \n            \n        \n            \n             Week 4 \n            \n        \n            \n                    M\n                    \n                    Oct. 03 \n             Iteration\n   \n        \n        \n             \n                We introduce definite and indefinite iteration as a method for performing repeated tasks. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Iteration  \n                            Think Like a Computer Scientist 8.1-8.9, 9.10-9.14  \n                            Think Python Chapter 7  \n                            Foundations of Python Programming 7.1-7.4, 14  \n            \n            \n                    Assigned\n                        HW3 \n            \n            \n                    Due\n                            HW2 \n            \n        \n        \n            \n                    W\n                    \n                    Oct. 05 \n             Lists\n   \n        \n        \n             \n                We introduce lists, data structures that can hold ordered sequences of arbitrary objects. We also begin to discuss some of the synergies between lists and iteration. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Lists  \n                            Think Like a Computer Scientist 10.1-14  \n                            Think Python Chapter 10  \n                            Foundations of Python Programming 6  \n            \n            \n            \n            \n                    Due\n                            Lab 2 \n            \n        \n        \n            \n                    T\n                    \n                    Oct. 06 \n             Lab: Iteration and Lists\n   \n        \n        \n             \n                We write functions that check the validity of International Standard Book Numbers (ISBNs). Along the way, we practice writing functions, iteration, and map-filter-reduce operations.  \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n                            Applications  \n            \n            \n                    Activity\n                            Lab 3  \n            \n            \n                    Assigned\n                        Lab 3 \n            \n            \n            \n        \n        \n            \n                    F\n                    \n                    Oct. 07 \n             Guided Discovery: Iteration and Lists\n   \n        \n        \n             \n                We work on several common patterns for manipulating lists using iteration. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Activity\n                            HW4, Problem 1  \n            \n            \n            \n            \n            \n        \n            \n             Week 5 \n            \n        \n            \n                    M\n                    \n                    Oct. 10 \n             List Operations: Map, Filter, and Reduce\n   \n        \n        \n             \n                We discuss the map-filter-reduce paradigm for operating on lists of data, and work several examples. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Lists, Section 2  \n                            Lecture script  \n            \n            \n                    Assigned\n                        HW4 \n            \n            \n            \n        \n        \n            \n                    W\n                    \n                    Oct. 12 \n             More Data Structures: Dictionaries and Tuples\n   \n        \n        \n             \n                We discuss two other useful data structures, with a special emphasis on the role of dictionaries in representing relationships between pieces of data. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Data Structures  \n                            Lecture script  \n            \n            \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Oct. 13 \n             Lab: Developers as Future-Makers\n   \n        \n        \n             \n                We write functions that filter applicants to an opportunity according to a set of numerical criteria, and reflect on the ethical challenges associated with such filters. Along the way, we practice iteration and working with lists. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n                            Social Responsibility  \n            \n            \n                    Activity\n                            Lab 4  \n            \n            \n                    Assigned\n                        Lab 4 \n            \n            \n            \n        \n        \n            \n                    F\n                    \n                    Oct. 14 \n             No Class! \n   \n        \n        \n             \n                Midterm Recess\n            \n        \n        \n            \n            \n            \n            \n            \n            \n            \n            \n            \n        \n            \n             Week 6 \n            \n        \n            \n                    M\n                    \n                    Oct. 17 \n             Review: Recursion\n   \n        \n        \n             \n                We work together on several problems to reinforce core concepts and techniques for recursive problem-solving. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Recursion  \n                            Lecture Script  \n            \n            \n            \n            \n                    Due\n                            HW4 \n            \n        \n        \n            \n                    W\n                    \n                    Oct. 19 \n             Representing Data: Integers\n   \n        \n        \n             \n                We begin a discussion of why computers represent data in binary, and how to convert between binary and decimal representations of integers. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n            \n            \n                    Reading\n                            Representing Data  \n                            Lecture Slides  \n            \n            \n            \n            \n                    Due\n                            Lab 4 \n            \n        \n            \n             Week 7 \n            \n        \n            \n                    M\n                    \n                    Oct. 24 \n             Representing Data: Floating Point Numbers\n   \n        \n        \n             \n                We continue our discussion of data representation. We highlight some of the challenges for computers in representing floating point numbers. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n            \n            \n                    Reading\n                            Representing Data  \n                            Lecture Slides  \n            \n            \n                    Assigned\n                        HW5 \n            \n            \n            \n        \n        \n            \n                    W\n                    \n                    Oct. 26 \n             Representing Data: and Images\n   \n        \n        \n             \n                We discuss representations of digital images as arrays of pixels. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n                            Applications  \n            \n            \n                    Reading\n                            Representing Data  \n                            Image Processing  \n                            Lecture Slides  \n            \n            \n                    Assigned\n                        HW5 \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Oct. 27 \n             Lab: Image Manipulation\n   \n        \n        \n             \n                We write functions that allow us to manipulate digital images. We implement brightening, contrast-heightening, reflection, and several other transformations. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n                            Applications  \n            \n            \n                    Activity\n                            Lab 5  \n            \n            \n                    Assigned\n                        Lab 5 \n            \n            \n            \n        \n            \n             Week 8 \n            \n        \n            \n                    M\n                    \n                    Oct. 31 \n             Introducing Object-Oriented Programming\n   \n        \n        \n             \n                We begin a discussion of object-oriented programming, the standard approach in Python for writing complex programs by combining data (attributes) and behavior (methods). \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Object-Oriented Programming  \n                            Lecture Slides  \n            \n            \n                    Assigned\n                        HW5 \n            \n            \n            \n        \n        \n            \n                    W\n                    \n                    Nov. 02 \n             More Object-Oriented Programming\n   \n        \n        \n             \n                We continue using object-oriented programming to implement complex program behavior. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Object-Oriented Programming  \n                            Lecture Slides  \n            \n            \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Nov. 03 \n             Lab: Object-Oriented Programming\n   \n        \n        \n             \n                We use object-oriented programming to create a set of interacting classes that model a computer science course. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Activity\n                            Lab 6  \n            \n            \n                    Assigned\n                        Lab 6 \n            \n            \n            \n        \n            \n             Week 9 \n            \n        \n            \n                    M\n                    \n                    Nov. 07 \n             Unit Testing\n   \n        \n        \n             \n                We introduce unit testing, an automated framework for checking correct functionality of small pieces (\"units\") of code. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Applications  \n            \n            \n                    Reading\n                            Blog Post on Medium  \n            \n            \n                    Assigned\n                        HW6 \n            \n            \n            \n        \n        \n            \n                    W\n                    \n                    Nov. 09 \n             More Unit Testing\n   \n        \n        \n             \n                We continue with an extended example of unit-testing. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Applications  \n            \n            \n                    Reading\n                            Blog Post on Medium  \n            \n            \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Nov. 10 \n             Lab: Developers as Prioritizers\n   \n        \n        \n             \n                We develop our skills using object-oriented interfaces while reflecting on some of the difficult choices posed by automated vehicles and rescue services. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Social Responsibility  \n                            Applications  \n            \n            \n                    Activity\n                            Lab 7  \n            \n            \n                    Assigned\n                        Lab 7 \n            \n            \n            \n        \n            \n             Week 10 \n            \n        \n            \n                    M\n                    \n                    Nov. 14 \n             String Methods\n   \n        \n        \n             \n                We survey several important string methods and use them for basic text analysis tasks. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Applications  \n            \n            \n                    Reading\n                            String methods reference  \n                            A Guide to Formatting with f-strings in Python   \n            \n            \n                    Assigned\n                        HW7 \n            \n            \n            \n        \n        \n            \n                    W\n                    \n                    Nov. 16 \n             Case Study: Lines in Plays\n   \n        \n        \n             \n                We use string methods in combination with our iteration and data structure skills to count the number of lines spoken by each character in Shakespeare's Hamlet. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Applications  \n            \n            \n                    Reading\n                            String methods reference  \n                            A Guide to Formatting with f-strings in Python   \n            \n            \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Nov. 17 \n             Lab: The Hedonometer\n   \n        \n        \n             \n                We implement sentiment analysis in the style of The Hedonometer at the University of Vermont, and use it to analyze the emotional arc of several famous speeches. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Social Responsibility  \n                            Applications  \n            \n            \n                    Activity\n                            Lab 8  \n            \n            \n                    Assigned\n                        Lab 8 \n            \n            \n            \n        \n            \n             Week 11 \n            \n        \n            \n                    M\n                    \n                    Nov. 21 \n             Thanksgiving Break! \n   \n        \n        \n             \n                No class this week, enjoy the holiday! \n            \n        \n        \n            \n            \n            \n            \n            \n            \n            \n            \n            \n        \n            \n             Week 12 \n            \n        \n            \n                    M\n                    \n                    Nov. 28 \n             Introducing Analysis of Algorithms\n   \n        \n        \n             \n                We begin the study of analyzing the worst-case runtime of algorithms using big-O analysis. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Analysis  \n                            Computational Thinking  \n            \n            \n                    Reading\n                            Computational Complexity  \n                            ThinkPython2e, Appendix B  \n            \n            \n            \n            \n            \n        \n        \n\nNo matching items\n\n\n  \n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "My First Blog Post\n\n\n\n\n\n\n\n\n\n\n\n\nInvalid Date\n\n\nPhil Chodrow\n\n\n\n\n\n\nNo matching items\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/blog-post-compas.html",
    "href": "assignments/blog-post-compas.html",
    "title": "Classification Rates in a Recidivism Prediction Algorithm",
    "section": "",
    "text": "© Phil Chodrow, 2023"
  },
  {
    "objectID": "RC-proposal.html",
    "href": "RC-proposal.html",
    "title": "",
    "section": "",
    "text": "Machine learning underlies many modern automated decision processes, with applications that span many domains of human life. Many of us interact with multiple machine learning models over the course of a single day, with some of these models having potentially impactful effects on our experiences and opportunities. Much recent scholarship has shown ways in which these effects are inequitably distributed along axes of race, gender, and class.\nThese considerations make explicit engagement with the topic of Responsible Computing an imperative component of machine learning pedagogy. My upcoming offering of the course includes, as a draft semester-spanning learning objective,\n\nStudents will interrogate sources of bias and harm in machine learning models, especially with regard to gender, race, and class.\n\nThis objective is intentionally relatively abstract. Possible learning activities and demonstrations toward this objective include:\n\nInstruction and activities on auditing algorithms.\nClassroom discussion of well-known case studies on bias in machine learning models.\nProgramming activities and data analysis from instances of bias in models.\nReadings and written reflections on landmark and survey papers or books on algorithmic bias.\nReadings, discussion, and critique of formal criteria for fairness in machine learning models.\nAnalysis of bias in student-generated models (e.g. word-embedding layers in text classifiers).\nEngagement with expert tech ethicists through talks or classroom visits.\nEthics statements on cumulative projects.\n\nAll of these demonstrations offer feedback opportunities, including:\n\nInstructor comments on code, data analyses, and project deliverables.\nDialogic annotations on readings through web commenting platforms.\nStudent self-assessments of learning and engagement.\n\n\n\n\n  © Phil Chodrow, 2023"
  },
  {
    "objectID": "assignments/blog-post-optimization.html",
    "href": "assignments/blog-post-optimization.html",
    "title": "Optimization for Logistic Regression",
    "section": "",
    "text": "© Phil Chodrow, 2023"
  }
]